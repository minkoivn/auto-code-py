# app/orchestrator.py
import os
import subprocess
import json
import time
import py_compile
from dotenv import load_dotenv
import google.generativeai as genai
from ai_agent import invoke_ai_x
from config import LOG_FILE_PATH, EXCLUDE_PATHS, MAX_AI_X_RETRIES, SLEEP_BETWEEN_ITERATIONS_SECONDS, VERSION, INTERACTIVE_MODE
from utils import get_source_code_context
from git_utils import add_and_commit
from ai_z_agent import invoke_ai_z # Th√™m import cho AI Z
import threading # New import for threading
from web_server import app as flask_app # New import for Flask app

# Constants for web interaction (will be moved to config.py in future iterations)
CONTROL_DIR = "app/control"
TRIGGER_NEXT_STEP_FLAG = os.path.join(CONTROL_DIR, "trigger_next_step.flag")

# --- C√ÅC H√ÄM TI·ªÜN √çCH V√Ä C·∫§U H√åNH ---

def setup():
    """T·∫£i bi·∫øn m√¥i tr∆∞·ªùng v√† c·∫•u h√¨nh API Key cho Gemini."""
    load_dotenv()
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise ValueError("GEMINI_API_KEY not found. Please set it in the .env file.")
    genai.configure(api_key=api_key);
    print("‚úÖ ƒê√£ c·∫•u h√¨nh Gemini API Key.")

def _run_web_server():
    """Ch·∫°y Flask web server trong m·ªôt thread ri√™ng."""
    print("üöÄ [Web Server] ƒêang kh·ªüi ƒë·ªông AI Agent X Web Interface...")
    print("üåê Truy c·∫≠p t·∫°i: http://127.0.0.1:3000")
    # debug=False v√† use_reloader=False khi ch·∫°y trong thread ƒë·ªÉ tr√°nh l·ªói reloader
    flask_app.run(debug=False, port=3000, use_reloader=False)

# --- C√ÅC H√ÄM T∆Ø∆†NG T√ÅC V·ªöI AI V√Ä LOG ---

def _invoke_ai_with_retries(context: str, history_log: list) -> tuple[str, str, str, str]:
    """
    K√™u g·ªçi AI X v·ªõi c∆° ch·∫ø th·ª≠ l·∫°i.
    Tr·∫£ v·ªÅ m·ªôt tuple: (filepath, new_content, description, failure_reason)
    """
    filepath, new_content, description, failure_reason = None, None, None, ""
    for attempt in range(MAX_AI_X_RETRIES):
        print(f"  (L·∫ßn th·ª≠ {attempt + 1}/{MAX_AI_X_RETRIES} cho AI X...)")
        filepath, new_content, description, failure_reason = invoke_ai_x(context, history_log)
        if filepath and new_content and description:
            print(f"  AI X ƒë√£ ƒë∆∞a ra ƒë·ªÅ xu·∫•t th√†nh c√¥ng ·ªü l·∫ßn th·ª≠ {attempt + 1}.")
            return filepath, new_content, description, None # Return None for failure_reason on success
        else:
            print(f"  AI X th·∫•t b·∫°i l·∫ßn {attempt + 1}. L√Ω do: {failure_reason}")
            if attempt < MAX_AI_X_RETRIES - 1:
                time.sleep(5) # Wait before retrying
    
    # If all retries failed
    return None, None, None, f"AI X th·∫•t b·∫°i sau {MAX_AI_X_RETRIES} l·∫ßn th·ª≠. L√Ω do cu·ªëi c√πng: {failure_reason}"

def _apply_and_validate_file_content(filepath: str, new_content: str) -> tuple[bool, str]:
    """
    √Åp d·ª•ng n·ªôi dung file m·ªõi v√†o h·ªá th·ªëng file, ki·ªÉm tra c√∫ ph√°p n·∫øu l√† Python.
    Tr·∫£ v·ªÅ (th√†nh c√¥ng: bool, th√¥ng b√°o l·ªói: str).
    """
    temp_filepath = filepath + ".tmp"
    is_new_file = not os.path.exists(filepath)

    try:
        dir_name = os.path.dirname(filepath)
        if dir_name:
            os.makedirs(dir_name, exist_ok=True)

        with open(temp_filepath, "w", encoding="utf-8") as f:
            f.write(new_content)
        
        is_python_file = filepath.endswith(".py")
        
        if is_python_file:
            py_compile.compile(temp_filepath, doraise=True)
            print("‚úÖ [VALIDATOR] M√£ ngu·ªìn Python m·ªõi h·ª£p l·ªá.")
        else:
            print(f"‚ö†Ô∏è [VALIDATOR] File '{filepath}' kh√¥ng ph·∫£i file Python, b·ªè qua ki·ªÉm tra c√∫ ph√°p.")

        os.replace(temp_filepath, filepath);
        action_verb = "T·∫°o m·ªõi" if is_new_file else "Ghi ƒë√®"
        print(f"üìù {action_verb} th√†nh c√¥ng file: {filepath}")
        return True, ""
        
    except py_compile.PyCompileError as e:
        return False, f"L·ªói c√∫ ph√°p trong ƒë·ªÅ xu·∫•t file Python m·ªõi: {e}"
    except Exception as e:
        return False, f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi √°p d·ª•ng file: {e}"
    finally:
        if os.path.exists(temp_filepath):
            os.remove(temp_filepath)


# --- H√ÄM TH·ª∞C THI KI·∫æN TR√öC M·ªöI ---

def validate_and_commit_changes(filepath: str, new_content: str, description: str):
    """
    Ki·ªÉm tra c√∫ ph√°p (n·∫øu l√† file Python), n·∫øu h·ª£p l·ªá th√¨ ghi ƒë√®/t·∫°o m·ªõi v√† commit.
    Tr·∫£ v·ªÅ m·ªôt tuple: (status, final_reason).
    """
    print(f"üöÄ [Z] B·∫Øt ƒë·∫ßu qu√° tr√¨nh th·ª±c thi cho file: {filepath}")
    
    success, validation_reason = _apply_and_validate_file_content(filepath, new_content)

    if not success:
        print(f"‚ùå [VALIDATOR] {validation_reason}")
        return "REJECTED_VALIDATION_FAILED", validation_reason
    
    try:
        commit_message = f"feat(AI): {description}"
        add_and_commit(filepath, commit_message)
        
        return "COMMITTED", description

    except RuntimeError as e:
        # B·∫Øt l·ªói t·ª´ git_utils.add_and_commit
        error_reason = f"L·ªói khi th·ª±c hi·ªán Git commit: {e}"
        print(f"‚ùå [Z] {error_reason}")
        return "EXECUTION_FAILED", error_reason
    except Exception as e:
        error_reason = f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh commit: {e}"
        print(f"‚ùå [Z] {error_reason}")
        return "EXECUTION_FAILED", error_reason

# --- C√ÅC B∆Ø·ªöC TI·∫æN H√ìA C·ªêT L√ïI ---

def _execute_evolution_step(iteration_count: int, history_log: list) -> dict:
    """
    Th·ª±c hi·ªán m·ªôt b∆∞·ªõc ti·∫øn h√≥a duy nh·∫•t (g·ªçi AI, x·ª≠ l√Ω ph·∫£n h·ªìi, x√°c th·ª±c v√† commit).
    Tr·∫£ v·ªÅ m·ªôt dictionary log_entry cho b∆∞·ªõc n√†y.
    """
    log_entry = { "iteration": iteration_count, "status": "", "reason": "" }
    
    # 1. L·∫•y b·ªëi c·∫£nh m√£ ngu·ªìn hi·ªán t·∫°i
    source_context = get_source_code_context()
    
    # 2. G·ªçi AI Z ƒë·ªÉ l·∫•y ƒë·ªÅ xu·∫•t nhi·ªám v·ª•
    task_suggestion = invoke_ai_z()
    
    # 3. T√≠ch h·ª£p ƒë·ªÅ xu·∫•t c·ªßa AI Z v√†o b·ªëi c·∫£nh cho AI X
    context_for_ai_x = source_context
    if task_suggestion:
        # Prepend the AI Z suggestion to the context in a clear format
        # B·ªçc task_suggestion trong d·∫•u nh√°y ƒë∆°n ƒë·ªÉ tr√°nh l·ªói c√∫ ph√°p n·∫øu task_suggestion c√≥ d·∫•u nh√°y k√©p
        context_for_ai_x = f"AI Z ƒë√£ ƒë∆∞a ra ƒë·ªÅ xu·∫•t sau cho b·∫°n: '{task_suggestion}'. H√£y xem x√©t ƒë·ªÅ xu·∫•t n√†y khi b·∫°n ƒë∆∞a ra thay ƒë·ªïi ti·∫øp theo ƒë·ªÉ c·∫£i thi·ªán d·ª± √°n.\n\n{source_context}"
        print(f"üß† [AI Z] ƒê·ªÅ xu·∫•t c·ªßa AI Z ƒë√£ ƒë∆∞·ª£c th√™m v√†o b·ªëi c·∫£nh cho AI X.")
    else:
        print("üß† [AI Z] Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t t·ª´ AI Z ho·∫∑c c√≥ l·ªói x·∫£y ra.")
    
    # 4. G·ªçi AI X v·ªõi b·ªëi c·∫£nh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    filepath, new_content, description, final_failure_reason = _invoke_ai_with_retries(context_for_ai_x, history_log)

    if filepath and new_content and description:
        status, final_reason = validate_and_commit_changes(filepath, new_content, description)
        log_entry["status"] = status
        log_entry["reason"] = final_reason
    else:
        print(f"‚ùå {final_failure_reason}")
        log_entry["status"] = "NO_PROPOSAL"
        log_entry["reason"] = final_failure_reason
        
    return log_entry

# --- C√ÅC H√ÄM QU·∫¢N L√ù L·ªäCH S·ª¨ ---

def _load_history() -> list:
    """T·∫£i l·ªãch s·ª≠ ti·∫øn h√≥a t·ª´ LOG_FILE_PATH."""
    history_log = []
    if os.path.exists(LOG_FILE_PATH):
        try:
            with open(LOG_FILE_PATH, "r", encoding="utf-8") as f:
                history_log = json.load(f)
            print(f"üìö ƒê√£ t·∫£i {len(history_log)} m·ª•c t·ª´ l·ªãch s·ª≠.")
        except json.JSONDecodeError:
            print(f"‚ö†Ô∏è File log {LOG_FILE_PATH} b·ªã l·ªói ho·∫∑c tr·ªëng, b·∫Øt ƒë·∫ßu l·ªãch s·ª≠ m·ªõi.")
            history_log = []
    return history_log

def _save_history(history_log: list):
    """L∆∞u l·ªãch s·ª≠ ti·∫øn h√≥a v√†o LOG_FILE_PATH."""
    with open(LOG_FILE_PATH, "w", encoding="utf-8") as f:
        json.dump(history_log, f, indent=4, ensure_ascii=False)
    print(f"üìù ƒê√£ c·∫≠p nh·∫≠t log v√†o file: {LOG_FILE_PATH}")

# --- LU·ªíNG CH√çNH V·ªöI C∆† CH·∫æ TH·ª¨ L·∫†I (RETRY) ---

def main(max_iterations: int = None):
    """H√†m ch√≠nh ch·ª©a v√≤ng l·∫∑p, qu·∫£n l√Ω l·ªãch s·ª≠ v√† c∆° ch·∫ø th·ª≠ l·∫°i.
    Args:
        max_iterations (int, optional): S·ªë chu k·ª≥ ti·∫øn h√≥a t·ªëi ƒëa ƒë·ªÉ ch·∫°y. 
                                        N·∫øu None, s·∫Ω ch·∫°y v√¥ th·ªùi h·∫°n.
    """
    setup()
    
    print(f"üåü Kh·ªüi ƒë·ªông AI Agent X - Phi√™n b·∫£n: {VERSION}")

    # Start the Flask web server in a separate thread
    web_thread = threading.Thread(target=_run_web_server, daemon=True)
    web_thread.start()
    
    history_log = _load_history() # Call new function

    iteration_count = len(history_log)

    try:
        while max_iterations is None or iteration_count < max_iterations:
            iteration_count += 1
            print("\n" + "="*50)
            print(f"üé¨ B·∫ÆT ƒê·∫¶U CHU TR√åNH TI·∫æN H√ìA L·∫¶N TH·ª® {iteration_count}")
            print("="*50)
            
            # G·ªçi h√†m tr·ª£ gi√∫p m·ªõi ƒë·ªÉ th·ª±c hi·ªán m·ªôt b∆∞·ªõc ti·∫øn h√≥a
            log_entry = _execute_evolution_step(iteration_count, history_log)
            
            history_log.append(log_entry)
            _save_history(history_log) # Call new function
            
            if INTERACTIVE_MODE:
                print("\n[CH·∫æ ƒê·ªò T∆Ø∆†NG T√ÅC] ƒêang ch·ªù k√≠ch ho·∫°t t·ª´ giao di·ªán web...")
                os.makedirs(CONTROL_DIR, exist_ok=True) # Ensure control directory exists
                while not os.path.exists(TRIGGER_NEXT_STEP_FLAG):
                    print(".", end="", flush=True)
                    time.sleep(1) # Check every second
                
                # Flag found, clear it and proceed
                os.remove(TRIGGER_NEXT_STEP_FLAG)
                print("\n‚úÖ ƒê√£ nh·∫≠n t√≠n hi·ªáu k√≠ch ho·∫°t t·ª´ web. Ti·∫øp t·ª•c chu tr√¨nh.")
            else:
                print(f"‚è≥ T·∫°m ngh·ªâ {SLEEP_BETWEEN_ITERATIONS_SECONDS} gi√¢y...")
                # Hi·ªÉn th·ªã ch·ªâ b√°o ti·∫øn ƒë·ªô trong th·ªùi gian t·∫°m d·ª´ng
                for i in range(SLEEP_BETWEEN_ITERATIONS_SECONDS):
                    print(".", end="", flush=True)
                    time.sleep(1)
                print() # Xu·ªëng d√≤ng sau khi in c√°c d·∫•u ch·∫•m

    except KeyboardInterrupt:
        print("\n\nüõë ƒê√£ nh·∫≠n t√≠n hi·ªáu d·ª´ng.")
    except Exception as e:
        print(f"‚õî ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

if __name__ == "__main__":
    main()
