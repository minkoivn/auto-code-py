# app/application.py
import time
import os
import signal
import unittest
import logging
from flask import Flask, request, jsonify
import json
import sys

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# L∆∞u tr·ªØ h√†m get_world_time v√† c√°c test case v√†o file ri√™ng
# T·∫°o file old_get_world_time.py
# Sao ch√©p h√†m get_world_time v√† c√°c test case t·ª´ file n√†y sang file old_get_world_time.py

#app/old_get_world_time.py
# Sao ch√©p n·ªôi dung c·ªßa h√†m get_world_time v√† class TestGetWorldTime t·ª´ file n√†y sang file old_get_world_time.py

class TestGetWorldTime(unittest.TestCase):
    pass


class TestGetData(unittest.TestCase):
    def test_get_data_success(self):
        with open('data.json', 'w') as f:
            json.dump({'message': 'Success'}, f)
        with app.test_client() as client:
            response = client.get('/data')
            self.assertEqual(response.status_code, 200)
            self.assertEqual(json.loads(response.data), {'message': 'Success'})
        os.remove('data.json')

    def test_get_data_file_not_found(self):
        with app.test_client() as client:
            response = client.get('/data')
            self.assertEqual(response.status_code, 404)
            self.assertEqual(json.loads(response.data), {'error': 'File data.json not found'})

    def test_get_data_invalid_json(self):
        with open('data.json', 'w') as f:
            f.write('invalid json')
        with app.test_client() as client:
            response = client.get('/data')
            self.assertEqual(response.status_code, 500)
            self.assertIn('Invalid JSON data', json.loads(response.data)['error'])
        os.remove('data.json')

    def test_get_root_success(self):
        with app.test_client() as client:
            response = client.get('/')
            self.assertEqual(response.status_code, 200)
            self.assertIn(b"<h1>Hello, world!</h1>", response.data)
app = Flask(__name__)

@app.route('/', methods=['GET'])
def index():
    logging.info("Nh·∫≠n request GET /")
    return "<h1>Hello, world!</h1>"

@app.route('/', methods=['POST'])
def receive_data():
    try:
        data = request.get_json()
        logging.info(f"Nh·∫≠n d·ªØ li·ªáu t·ª´ client: {data}")
        # L∆∞u d·ªØ li·ªáu v√†o file t·∫°m th·ªùi
        with open('data.json', 'w') as f:
            json.dump(data, f)
        return jsonify({'message': 'D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c nh·∫≠n th√†nh c√¥ng'}), 200
    except json.JSONDecodeError:
        logging.error(f"L·ªói: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (JSONDecodeError)")
        return jsonify({'error': 'D·ªØ li·ªáu g·ª≠i l√™n kh√¥ng h·ª£p l·ªá'}), 400
    except Exception as e:
        logging.exception(f"L·ªói khi nh·∫≠n d·ªØ li·ªáu: {e}")
        return jsonify({'error': 'L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu'}), 500

@app.route('/file', methods=['POST'])
def manage_file():
    try:
        data = request.get_json()
        filename = data.get('filename')
        filetype = data.get('filetype')
        action = data.get('action')

        if not filename or not filetype or not action:
            return jsonify({'error': 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt'}), 400

        if action == 'add':
            # Th√™m t·ªáp
            with open(filename, 'w') as f:
                f.write("")  # T·∫°o t·ªáp tr·ªëng
            return jsonify({'message': f'T·ªáp {filename} ƒë√£ ƒë∆∞·ª£c th√™m'}), 201
        elif action == 'delete':
            # X√≥a t·ªáp
            if os.path.exists(filename):
                os.remove(filename)
                return jsonify({'message': f'T·ªáp {filename} ƒë√£ ƒë∆∞·ª£c x√≥a'}), 200
            else:
                return jsonify({'error': f'T·ªáp {filename} kh√¥ng t·ªìn t·∫°i'}), 404
        else:
            return jsonify({'error': 'H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá'}), 400
    except OSError as e:
        logging.exception(f"L·ªói h·ªá th·ªëng khi qu·∫£n l√Ω t·ªáp: {e}")
        return jsonify({'error': f'L·ªói h·ªá th·ªëng: {e}'}), 500
    except Exception as e:
        logging.exception(f"L·ªói khi qu·∫£n l√Ω t·ªáp: {e}")
        return jsonify({'error': 'L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu'}), 500

def process_data():
    try:
        with open('data.json', 'r') as f:
            data = json.load(f)
            # G·ªçi orchestrator
            import orchestrator  # gi·∫£ ƒë·ªãnh orchestrator ·ªü c√πng th∆∞ m·ª•c
            orchestrator.process(data)
    except FileNotFoundError:
        logging.warning(f"L·ªói: File data.json kh√¥ng t·ªìn t·∫°i.")
    except json.JSONDecodeError as e:
        logging.error(f"L·ªói JSONDecodeError: {e}", exc_info=True)
    except Exception as e:
        logging.exception(f"L·ªói khi x·ª≠ l√Ω data.json: {e}")

@app.route('/data', methods=['GET'])
def get_data():
    try:
        logging.info("Nh·∫≠n request GET /data")
        if os.path.exists('data.json'):
            with open('data.json', 'r') as f:
                data = json.load(f)
                logging.info("Tr·∫£ v·ªÅ d·ªØ li·ªáu th√†nh c√¥ng")
                return jsonify(data), 200
        else:
            logging.warning("File data.json kh√¥ng t·ªìn t·∫°i")
            return jsonify({'error': 'File data.json not found'}), 404
    except json.JSONDecodeError as e:
        logging.error(f"Invalid JSON data: {str(e)}", exc_info=True)
        return jsonify({'error': f'Invalid JSON data: {str(e)}'}), 500
    except Exception as e:
        logging.exception(f"An error occurred: {str(e)}")
        return jsonify({'error': f'An error occurred: {str(e)}'}), 500

def run_app():
    """
    ƒê√¢y l√† n∆°i ch·ª©a logic ch√≠nh c·ªßa ·ª©ng d·ª•ng c·ªßa b·∫°n.
    """
    print(f"[{time.ctime()}] --- ·ª®ng d·ª•ng ƒëang ch·∫°y (PID: {os.getpid()}) --- Phi√™n b·∫£n 1.0")
    
    # ƒê·ªÉ ki·ªÉm tra, h√£y th·ª≠ thay ƒë·ªïi n·ªôi dung c·ªßa t·ªáp n√†y khi n√≥ ƒëang ch·∫°y.
    # V√≠ d·ª•: thay ƒë·ªïi "Phi√™n b·∫£n 1.0" th√†nh "Phi√™n b·∫£n 1.1" v√† l∆∞u l·∫°i.
    # main.py s·∫Ω t·ª± ƒë·ªông ph√°t hi·ªán v√† kh·ªüi ƒë·ªông l·∫°i n√≥.
    
    # ƒê·ªÉ ki·ªÉm tra ph·ª•c h·ªìi l·ªói, h√£y t·∫°o ra l·ªói c√∫ ph√°p v√† l∆∞u l·∫°i.
    # V√≠ d·ª•: x√≥a d·∫•u ngo·∫∑c ·ªü cu·ªëi d√≤ng print b√™n d∆∞·ªõi.
    # print(f"M·ªôt d√≤ng code kh√¥ng l·ªói"
    
    count = 0
    def handle_signal(signum, frame):
        print(f"[{time.ctime()}] --- ·ª®ng d·ª•ng nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu {signal.Signals(signum).name} ---")
    
    signal.signal(signal.SIGINT, handle_signal)
    signal.signal(signal.SIGTERM, handle_signal)

    while True:
        print(f"[{time.ctime()}] AI ƒëang l√†m vi·ªác... L·∫ßn th·ª© {count+1} ü§ñ")
        process_data()
        count += 1
        time.sleep(18)

if __name__ == "__main__":
    try:
        unittest.main(argv=['first-arg-is-ignored'], exit=False) # Ch·∫°y test tr∆∞·ªõc
        app.run(debug=False, port=3000)
    except Exception as e:
        # Ghi l·ªói v√†o stderr ƒë·ªÉ main.py c√≥ th·ªÉ b·∫Øt ƒë∆∞·ª£c
        print(f"·ª®ng d·ª•ng g·∫∑p l·ªói v√† b·ªã s·∫≠p: {e}", file=sys.stderr)
        # Tho√°t v·ªõi m√£ l·ªói ƒë·ªÉ b√°o hi·ªáu cho supervisor
        sys.exit(1)