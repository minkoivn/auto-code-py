# app/orchestrator.py (N√¢ng c·∫•p l√™n h·ªá th·ªëng t·ª± ch·ªß)
import sys
import logging
import json
from pathlib import Path
from datetime import datetime
import time
# S·ª≠a import: Th√™m invoke_planner_ai
from ai_agent import modify_application_code, fix_application_code, invoke_planner_ai

# --- Thi·∫øt l·∫≠p ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s [ORCHESTRATOR] [%(levelname)s] - %(message)s")
EVOLUTION_LOG_FILE = Path("app/logs/evolution_log.json")
PLAN_FILE = Path("app/logs/plan.json") # File ƒë·ªÉ l∆∞u k·∫ø ho·∫°ch
MAX_HISTORY_ENTRIES = 10

# --- C√°c h√†m qu·∫£n l√Ω nh·∫≠t k√Ω v√† k·∫ø ho·∫°ch ---
def load_json_file(filepath: Path) -> list | dict:
    if not filepath.exists():
        return []
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return []

def save_json_file(filepath: Path, data: list | dict):
    filepath.parent.mkdir(exist_ok=True)
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def save_evolution_entry(user_request: str, ai_description: str):
    history = load_json_file(EVOLUTION_LOG_FILE)
    entry = {"timestamp": datetime.now().isoformat(), "user_request": user_request, "ai_change_description": ai_description}
    history.append(entry)
    save_json_file(EVOLUTION_LOG_FILE, history)

# --- H√†m cho c√°c ch·∫ø ƒë·ªô ---
def execute_manual_request(user_request: str):
    """Th·ª±c hi·ªán m·ªôt y√™u c·∫ßu ƒë∆°n l·∫ª t·ª´ ng∆∞·ªùi d√πng."""
    logging.info(f"ƒêang th·ª±c hi·ªán y√™u c·∫ßu th·ªß c√¥ng: '{user_request}'")
    history = load_json_file(EVOLUTION_LOG_FILE)[-MAX_HISTORY_ENTRIES:]
    try:
        description = modify_application_code(user_request, history)
        save_evolution_entry(user_request, description)
        logging.info(f"ƒê√£ ghi l·∫°i thay ƒë·ªïi v√†o nh·∫≠t k√Ω: '{description}'")
    except Exception as e:
        logging.critical(f"Kh√¥ng th·ªÉ ho√†n th√†nh y√™u c·∫ßu th·ªß c√¥ng. L·ªói: {e}")

def execute_autonomous_goal(user_goal: str):
    """Th·ª±c hi·ªán m·ªôt m·ª•c ti√™u l·ªõn m·ªôt c√°ch t·ª± ch·ªß."""
    logging.info(f"--- B·∫ÆT ƒê·∫¶U CH·∫æ ƒê·ªò T·ª∞ CH·ª¶ V·ªöI M·ª§C TI√äU: {user_goal} ---")
    
    # B∆∞·ªõc 1: G·ªçi AI Planner ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch
    history = load_json_file(EVOLUTION_LOG_FILE)[-MAX_HISTORY_ENTRIES:]
    plan = invoke_planner_ai(user_goal, history)
    
    if not plan:
        logging.critical("Kh√¥ng th·ªÉ t·∫°o k·∫ø ho·∫°ch. D·ª´ng ch·∫ø ƒë·ªô t·ª± ch·ªß.")
        return
        
    save_json_file(PLAN_FILE, {"goal": user_goal, "steps": plan, "completed_steps": 0})
    logging.info(f"ƒê√£ l∆∞u k·∫ø ho·∫°ch v√†o '{PLAN_FILE}'.")
    
    # B∆∞·ªõc 2: Th·ª±c thi t·ª´ng b∆∞·ªõc trong k·∫ø ho·∫°ch
    for i, step_data in enumerate(plan):
        step_description = step_data.get("description")
        logging.info(f"--- ƒêang th·ª±c hi·ªán B∆∞·ªõc {i+1}/{len(plan)}: {step_description} ---")
        
        try:
            # S·ª≠ d·ª•ng h√†m modify_application_code ƒë·ªÉ th·ª±c hi·ªán b∆∞·ªõc n√†y
            # Ch√∫ng ta coi m·ªói b∆∞·ªõc l√† m·ªôt "y√™u c·∫ßu" cho Executor AI
            history = load_json_file(EVOLUTION_LOG_FILE)[-MAX_HISTORY_ENTRIES:]
            ai_change_desc = modify_application_code(step_description, history)
            
            # Ghi l·∫°i th√†nh c√¥ng c·ªßa b∆∞·ªõc n√†y v√†o nh·∫≠t k√Ω
            save_evolution_entry(f"T·ª± ch·ªß (B∆∞·ªõc {i+1}): {step_description}", ai_change_desc)
            
            # C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô k·∫ø ho·∫°ch
            plan_data = load_json_file(PLAN_FILE)
            plan_data["completed_steps"] = i + 1
            save_json_file(PLAN_FILE, plan_data)
            
            logging.info(f"‚úÖ HO√ÄN TH√ÄNH B∆Ø·ªöC {i+1}. ƒê·ª£i h·ªá th·ªëng ·ªïn ƒë·ªãnh...")
            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ supervisor kh·ªüi ƒë·ªông l·∫°i v√† ·ªïn ƒë·ªãnh
            time.sleep(10)

        except Exception as e:
            logging.critical(f"‚ùå L·ªñI KHI TH·ª∞C HI·ªÜN B∆Ø·ªöC {i+1}. L·ªói: {e}")
            logging.error("H·ªá th·ªëng t·ª± s·ª≠a l·ªói s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t b·ªüi Supervisor.")
            logging.error("Ch·∫ø ƒë·ªô t·ª± ch·ªß s·∫Ω t·∫°m d·ª´ng. H√£y s·ª≠a l·ªói v√† ch·∫°y l·∫°i.")
            break # D·ª´ng v√≤ng l·∫∑p k·∫ø ho·∫°ch n·∫øu c√≥ l·ªói
            
    else: # Ch·ªâ ch·∫°y khi v√≤ng for ho√†n th√†nh kh√¥ng b·ªã break
        logging.info("üéâ T·∫§T C·∫¢ C√ÅC B∆Ø·ªöC TRONG K·∫æ HO·∫†CH ƒê√É HO√ÄN TH√ÄNH! M·ª§C TI√äU ƒê·∫†T ƒê∆Ø·ª¢C. üéâ")
        PLAN_FILE.unlink(missing_ok=True) # X√≥a file k·∫ø ho·∫°ch khi xong


def main():
    """H√†m ch√≠nh ƒëi·ªÅu ph·ªëi, h·ªó tr·ª£ ch·∫ø ƒë·ªô th·ªß c√¥ng v√† t·ª± ch·ªß."""
    if len(sys.argv) < 2:
        print("S·ª≠ d·ª•ng:")
        print("  - Ch·∫ø ƒë·ªô th·ªß c√¥ng: python app/orchestrator.py \"Y√™u c·∫ßu c·ª• th·ªÉ\"")
        print("  - Ch·∫ø ƒë·ªô t·ª± ch·ªß:   python app/orchestrator.py --goal \"M·ª•c ti√™u l·ªõn c·ªßa b·∫°n\"")
        sys.exit(1)
        
    if sys.argv[1] == '--goal':
        if len(sys.argv) < 3:
            print("L·ªói: Vui l√≤ng cung c·∫•p m·ª•c ti√™u sau --goal.")
            sys.exit(1)
        user_goal = " ".join(sys.argv[2:])
        execute_autonomous_goal(user_goal)
    else:
        user_request = " ".join(sys.argv[1:])
        execute_manual_request(user_request)

# trigger_self_correction gi·ªØ nguy√™n
def trigger_self_correction(error_message: str):
    logging.info("ƒê√£ nh·∫≠n t√≠n hi·ªáu t·ª± s·ª≠a l·ªói t·ª´ Supervisor.")
    fix_application_code(error_message)

if __name__ == "__main__":
    main()