import os
import json
import re
import google.generativeai as genai

PROMPT_FILE_PATH = "app/prompts/x_prompt.txt"

def _format_history_for_prompt(history_log: list, num_entries=10) -> str:
    """ƒê·ªãnh d·∫°ng c√°c m·ª•c log g·∫ßn ƒë√¢y nh·∫•t ƒë·ªÉ ƒë∆∞a v√†o prompt."""
    if not history_log:
        return "Ch∆∞a c√≥ l·ªãch s·ª≠."
    
    recent_history = history_log[-num_entries:]
    formatted_history = ""
    for entry in recent_history:
        formatted_history += f"- L·∫ßn {entry['iteration']}: Tr·∫°ng th√°i = {entry['status']}. L√Ω do = {entry['reason']}\n"
    return formatted_history

def invoke_ai_x(context: str, history_log: list):
    """
    Y√™u c·∫ßu AI X tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON ch·ª©a n·ªôi dung file m·ªõi v√† m√¥ t·∫£.
    Tr·∫£ v·ªÅ m·ªôt tuple: (filepath, new_content, description, failure_reason)
    """
    print("ü§ñ [AI X] ƒêang k·∫øt n·ªëi Gemini, ƒë·ªçc l·ªãch s·ª≠ v√† t·∫°o ƒë·ªÅ xu·∫•t file m·ªõi...")
    with open(PROMPT_FILE_PATH, "r", encoding="utf-8") as f:
        prompt_template = f.read()
    
    history_context = _format_history_for_prompt(history_log)
    prompt_filled_history = prompt_template.replace("{history_context}", history_context)
    prompt = f"{prompt_filled_history}\n\n{context}"
    
    model = genai.GenerativeModel('gemini-2.5-flash')
    try:
        response = model.generate_content(prompt)
        text = response.text.replace("\u00A0", " ").replace("\r", "")
        
        # C·∫≠p nh·∫≠t regex ƒë·ªÉ t√¨m kh·ªëi JSON
        match = re.search(r'```json\s*({.*?})\s*```', text, re.DOTALL)
        if not match:
            match = re.search(r'({.*?})', text, re.DOTALL)

        if match:
            json_string = match.group(1)
            try:
                data = json.loads(json_string)
                filepath =  data.get("filepath")
                # ƒê·∫£m b·∫£o filepath b·∫Øt ƒë·∫ßu b·∫±ng 'app/' n·∫øu ch∆∞a c√≥
                if filepath and not filepath.startswith("app/"):
                    filepath = "app/" + filepath
                    
                new_content = data.get("new_code")
                description = data.get("description")

                if not all([filepath, new_content, description]):
                    return None, None, None, "JSON tr·∫£ v·ªÅ thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc (filepath, new_code, description)."

                print("ü§ñ [AI X] ƒê√£ nh·∫≠n ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t JSON h·ª£p l·ªá.")
                return filepath, new_content, description, None
            except json.JSONDecodeError:
                return None, None, None, "AI tr·∫£ v·ªÅ chu·ªói kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá."
        else:
            return None, None, None, "AI kh√¥ng tr·∫£ v·ªÅ n·ªôi dung theo ƒë·ªãnh d·∫°ng JSON..."

    except Exception as e:
        print(f"‚ùå L·ªói khi g·ªçi Gemini API cho AI X: {e}")
        return None, None, None, str(e)
