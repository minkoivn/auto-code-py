# app/orchestrator.py
import os
import subprocess
import json
import time
import py_compile
from dotenv import load_dotenv
import google.generativeai as genai
from ai_agent import invoke_ai_x
from config import LOG_FILE_PATH, EXCLUDE_PATHS, MAX_AI_X_RETRIES, SLEEP_BETWEEN_ITERATIONS_SECONDS
from utils import get_source_code_context
from git_utils import add_and_commit

# --- C√ÅC H√ÄM TI·ªÜN √çCH V√Ä C·∫§U H√åNH ---

def setup():
    """T·∫£i bi·∫øn m√¥i tr∆∞·ªùng v√† c·∫•u h√¨nh API Key cho Gemini."""
    load_dotenv()
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise ValueError("GEMINI_API_KEY not found. Please set it in the .env file.")
    genai.configure(api_key=api_key)
    print("‚úÖ ƒê√£ c·∫•u h√¨nh Gemini API Key.")

# H√†m get_source_code_context ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang app/utils.py v√† ƒë∆∞·ª£c nh·∫≠p ·ªü tr√™n.

# --- C√ÅC H√ÄM T∆Ø∆†NG T√ÅC V·ªöI AI V√Ä LOG ---

# C√°c h√†m format_history_for_prompt v√† invoke_ai_x ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang app/ai_agent.py

# --- H√ÄM TH·ª∞C THI KI·∫æN TR√öC M·ªöI ---

def validate_and_commit_changes(filepath: str, new_content: str, description: str):
    """
    Ki·ªÉm tra c√∫ ph√°p, n·∫øu h·ª£p l·ªá th√¨ ghi ƒë√®/t·∫°o m·ªõi v√† commit.
    Tr·∫£ v·ªÅ m·ªôt tuple: (status, final_reason).
    """
    print(f"üöÄ [Z] B·∫Øt ƒë·∫ßu qu√° tr√¨nh th·ª±c thi cho file: {filepath}")
    temp_filepath = filepath + ".tmp"
    is_new_file = not os.path.exists(filepath)
    
    try:
        # ƒê·∫£m b·∫£o th∆∞ m·ª•c cho file m·ªõi t·ªìn t·∫°i
        dir_name = os.path.dirname(filepath)
        if dir_name:
            os.makedirs(dir_name, exist_ok=True)

        with open(temp_filepath, "w", encoding="utf-8") as f:
            f.write(new_content)
        
        py_compile.compile(temp_filepath, doraise=True)
        print("‚úÖ [VALIDATOR] M√£ ngu·ªìn m·ªõi h·ª£p l·ªá.")

        os.replace(temp_filepath, filepath);
        action_verb = "T·∫°o m·ªõi" if is_new_file else "Ghi ƒë√®"
        print(f"üìù {action_verb} th√†nh c√¥ng file: {filepath}")
        
        # S·ª≠ d·ª•ng h√†m add_and_commit t·ª´ git_utils thay v√¨ g·ªçi subprocess tr·ª±c ti·∫øp
        commit_message = f"feat(AI): {description}"
        add_and_commit(filepath, commit_message)
        
        return "COMMITTED", description

    except py_compile.PyCompileError as e:
        error_reason = f"L·ªói c√∫ ph√°p trong ƒë·ªÅ xu·∫•t m·ªõi: {e}"
        print(f"‚ùå [VALIDATOR] {error_reason}")
        return "REJECTED_VALIDATION_FAILED", error_reason
    except Exception as e:
        error_reason = f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh th·ª±c thi: {e}"
        print(f"‚ùå [Z] {error_reason}")
        return "EXECUTION_FAILED", error_reason
    finally:
        if os.path.exists(temp_filepath):
            os.remove(temp_filepath)


# --- LU·ªíNG CH√çNH V·ªöI C∆† CH·∫æ TH·ª¨ L·∫†I (RETRY) ---

def main():
    """H√†m ch√≠nh ch·ª©a v√≤ng l·∫∑p, qu·∫£n l√Ω l·ªãch s·ª≠ v√† c∆° ch·∫ø th·ª≠ l·∫°i."""
    setup()
    
    history_log = []
    if os.path.exists(LOG_FILE_PATH):
        try:
            with open(LOG_FILE_PATH, "r", encoding="utf-8") as f:
                history_log = json.load(f)
            print(f"üìö ƒê√£ t·∫£i {len(history_log)} m·ª•c t·ª´ l·ªãch s·ª≠.")
        except json.JSONDecodeError:
            print(f"‚ö†Ô∏è File log {LOG_FILE_PATH} b·ªã l·ªói, b·∫Øt ƒë·∫ßu l·ªãch s·ª≠ m·ªõi.")
            history_log = []

    iteration_count = len(history_log)

    try:
        while True:
            iteration_count += 1
            print("\n" + "="*50)
            print(f"üé¨ B·∫ÆT ƒê·∫¶U CHU TR√åNH TI·∫æN H√ìA L·∫¶N TH·ª® {iteration_count}")
            print("="*50)
            
            log_entry = { "iteration": iteration_count, "status": "", "reason": "" }
            source_context = get_source_code_context()
            
            filepath, new_content, description, failure_reason = None, None, None, ""
            for attempt in range(MAX_AI_X_RETRIES):
                print(f"  (L·∫ßn th·ª≠ {attempt + 1}/{MAX_AI_X_RETRIES} cho AI X...)")
                filepath, new_content, description, failure_reason = invoke_ai_x(source_context, history_log)
                if filepath and new_content and description:
                    break 
                else:
                    print(f"  AI X th·∫•t b·∫°i l·∫ßn {attempt + 1}. L√Ω do: {failure_reason}")
                    if attempt < MAX_AI_X_RETRIES - 1:
                        time.sleep(5)

            if filepath and new_content and description:
                status, final_reason = validate_and_commit_changes(filepath, new_content, description)
                log_entry["status"] = status
                log_entry["reason"] = final_reason
            else:
                final_failure_reason = f"AI X th·∫•t b·∫°i sau {MAX_AI_X_RETRIES} l·∫ßn th·ª≠. L√Ω do cu·ªëi c√πng: {failure_reason}"
                print(f"‚ùå {final_failure_reason}")
                log_entry["status"] = "NO_PROPOSAL"
                log_entry["reason"] = final_failure_reason
            
            history_log.append(log_entry)
            with open(LOG_FILE_PATH, "w", encoding="utf-8") as f:
                json.dump(history_log, f, indent=4, ensure_ascii=False)
            print(f"üìù ƒê√£ c·∫≠p nh·∫≠t log v√†o file: {LOG_FILE_PATH}")
            
            print(f"‚è≥ T·∫°m ngh·ªâ {SLEEP_BETWEEN_ITERATIONS_SECONDS} gi√¢y...")
            time.sleep(SLEEP_BETWEEN_ITERATIONS_SECONDS)

    except KeyboardInterrupt:
        print("\n\nüõë ƒê√£ nh·∫≠n t√≠n hi·ªáu d·ª´ng.")
    except Exception as e:
        print(f"‚õî ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

if __name__ == "__main__":
    main()
