# app/ai_z_agent.py

import os
import google.generativeai as genai
from config import Z_PROMPT_FILE_PATH, AI_MODEL_NAME # Import t·ª´ config.py
from logging_setup import logger # Import the logger

def invoke_ai_z():
    """
    Y√™u c·∫ßu AI Z ƒë·ªÅ xu·∫•t m·ªôt nhi·ªám v·ª• ho·∫∑c v·∫•n ƒë·ªÅ nh·ªè cho AI X.
    Tr·∫£ v·ªÅ chu·ªói m√¥ t·∫£ nhi·ªám v·ª• ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t ho·∫∑c None n·∫øu c√≥ l·ªói.
    """
    logger.info("üß† [AI Z] ƒêang k·∫øt n·ªëi Gemini, ƒë·ªçc prompt v√† t·∫°o ƒë·ªÅ xu·∫•t nhi·ªám v·ª•...")
    try:
        if not os.path.exists(Z_PROMPT_FILE_PATH):
            logger.error(f"File prompt cho AI Z kh√¥ng t√¨m th·∫•y: {Z_PROMPT_FILE_PATH}")
            raise FileNotFoundError(f"File prompt cho AI Z kh√¥ng t√¨m th·∫•y: {Z_PROMPT_FILE_PATH}")

        with open(Z_PROMPT_FILE_PATH, "r", encoding="utf-8") as f:
            prompt = f.read()

        model = genai.GenerativeModel(AI_MODEL_NAME)
        response = model.generate_content(prompt)
        
        task_suggestion = response.text.strip()
        logger.info(f"üß† [AI Z] ƒê√£ nh·∫≠n ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t nhi·ªám v·ª•: '{task_suggestion[:100]}...' [Ti·∫øp theo: xem full ƒë·ªÅ xu·∫•t]")
        return task_suggestion
        
    except FileNotFoundError as e:
        logger.error(f"‚ùå L·ªói: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi g·ªçi Gemini API cho AI Z: {e}", exc_info=True)
        return None
